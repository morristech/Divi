docker CheatSheet:
end of part 2

docker build -t friendlyhello .  # Create image using this directory's Dockerfile
docker run -p 4000:80 friendlyhello  # Run "friendlyname" mapping port 4000 to 80
docker run -d -p 4000:80 friendlyhello         # Same thing, but in detached mode
docker container ls                                # List all running containers
docker container ls -a             # List all containers, even those not running
docker container stop <hash>           # Gracefully stop the specified container
docker container kill <hash>         # Force shutdown of the specified container
docker container rm <hash>        # Remove specified container from this machine
docker container rm $(docker container ls -a -q)         # Remove all containers
docker image ls -a                             # List all images on this machine
docker image rm <image id>            # Remove specified image from this machine
docker image rm $(docker image ls -a -q)   # Remove all images from this machine
docker login             # Log in this CLI session using your Docker credentials
docker tag <image> username/repository:tag  # Tag <image> for upload to registry
docker push username/repository:tag            # Upload tagged image to registry
docker run username/repository:tag                   # Run image from a registry

Part-3:
docker service ls
ID                  NAME                MODE                REPLICAS            IMAGE                            PORTS
s855gxt37xzw        getstartedlab_web   replicated          5/5                 dcaldwellsw/get-started:part-2   *:80->80/tcp


# after writing yml file: 
docker swarm init

# start up a swarm
docker stack deploy -c docker-compose.yml getstartedlab

# check the service:
docker service ls

# list the processes in the service
docker service ps getstartedlab_web

# list IDs
docker container ls -q

#  Take down the app
docker stack rm getstartedlab

# take down the swarm.
docker swarm leave --force

docker stack ls                                            # List stacks or apps
docker stack deploy -c <composefile> <appname>  # Run the specified Compose file
docker service ls                 # List running services associated with an app
docker service ps <service>                  # List tasks associated with an app
docker inspect <task or container>                   # Inspect task or container
docker container ls -q                                      # List container IDs
docker stack rm <appname>                             # Tear down an application
docker swarm leave --force      # Take down a single node swarm from the manager


Part-4
# make docker VMs on the local machine:  default is virtualbox:
docker-machine create --driver virtualbox myvm1
docker-machine create --driver virtualbox myvm2

# I have parallels and  needed the driver: https://github.com/Parallels/docker-machine-parallels
docker-machine create --driver parallels myvm1
docker-machine create --driver parallels myvm2

docker-machine ls
# NAME    ACTIVE   DRIVER      STATE     URL                        SWARM   DOCKER        ERRORS
# myvm1   -        parallels   Running   tcp://10.211.55.182:2376           v18.01.0-ce   
# myvm2   -        parallels   Running   tcp://10.211.55.183:2376           v18.01.0-ce  

# run docker swarm init on myvm1
# docker-machine ssh myvm1 "docker swarm init --advertise-addr <myvm1 ip>"
docker-machine ssh myvm1 "docker swarm init --advertise-addr 10.211.55.182"
# Swarm initialized: current node (1oktlql3awvhp61r1fd8z8hso) is now a manager.
# 
# To add a worker to this swarm, run the following command:
# 
#     docker swarm join --token SWMTKN-1-20joefl484crvljbf4zhtku69v4fwzq6prm9uj111vsabsr6b8-5uygakjcfm9w19u5r33h8b8a7 10.211.55.182:2377
# 
# To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.

# add myvm2 to swarm cluster 
docker-machine ssh myvm2 "docker swarm join --token SWMTKN-1-20joefl484crvljbf4zhtku69v4fwzq6prm9uj111vsabsr6b8-5uygakjcfm9w19u5r33h8b8a7 10.211.55.182:2377"

# now look at the docker nodes on the cluster
docker-machine ssh myvm1 "docker node ls"
# ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS
# 1oktlql3awvhp61r1fd8z8hso *   myvm1               Ready               Active              Leader
# a803ttq5t8yfsxlxmwnfm1doz     myvm2               Ready               Active 

# this just setup the cluster, now deploy the app, basically doing Part-3 again, sort of...
# set the shell to talk to myvm1 directly:
docker-machine env myvm1
Output # export DOCKER_TLS_VERIFY="1"
# export DOCKER_HOST="tcp://10.211.55.182:2376"
# export DOCKER_CERT_PATH="/Users/dcaldwell/.docker/machine/machines/myvm1"
# export DOCKER_MACHINE_NAME="myvm1"
# # Run this command to configure your shell: 
# # eval $(docker-machine env myvm1)
eval $(docker-machine env myvm1)

# look at the cluster.
docker-machine ls
# NAME    ACTIVE   DRIVER      STATE     URL                        SWARM   DOCKER        ERRORS
# myvm1   *        parallels   Running   tcp://10.211.55.182:2376           v18.01.0-ce   
# myvm2   -        parallels   Running   tcp://10.211.55.183:2376           v18.01.0-ce  

docker stack deploy -c docker-compose.yml getstartedlab
# Creating network getstartedlab_webnet
# Creating service getstartedlab_web


docker stack ps getstartedlab
# ID                  NAME                  IMAGE                            NODE                DESIRED STATE       CURRENT STATE                ERROR               PORTS
# z5z4fainpd4e        getstartedlab_web.1   dcaldwellsw/get-started:part-2   myvm2               Running             Running about a minute ago                       
# en0tje1bj4ry        getstartedlab_web.2   dcaldwellsw/get-started:part-2   myvm1               Running             Running about a minute ago                       
# 596hpw503iud        getstartedlab_web.3   dcaldwellsw/get-started:part-2   myvm2               Running             Running about a minute ago                       
# dj1jxlv30jat        getstartedlab_web.4   dcaldwellsw/get-started:part-2   myvm1               Running             Running about a minute ago                       
# e5af2p75m1vt        getstartedlab_web.5   dcaldwellsw/get-started:part-2   myvm2               Running             Running about a minute ago                       
# 3ys591iqdosd        getstartedlab_web.6   dcaldwellsw/get-started:part-2   myvm1               Running             Running about a minute ago                       
# 0qvshxkw97so        getstartedlab_web.7   dcaldwellsw/get-started:part-2   myvm2               Running             Running about a minute ago 

# app deployed, shell still running in myvm1

# Tear down the Stack

docker stack rm getstartedlab
# Removing service getstartedlab_web
# Removing network getstartedlab_webnet

# remove the swarm:
docker-machine ssh myvm2 "docker swarm leave"
docker-machine ssh myvm1 "docker swarm leave --force"

# but it's needed for part 5 too, so keep it^^

# UNSET docker-machine shell variable settings:
eval $(docker-machine env -u)

docker-machine create --driver virtualbox myvm1 # Create a VM (Mac, Win7, Linux)
docker-machine create -d hyperv --hyperv-virtual-switch "myswitch" myvm1 # Win10
docker-machine env myvm1                # View basic information about your node
docker-machine ssh myvm1 "docker node ls"         # List the nodes in your swarm
docker-machine ssh myvm1 "docker node inspect <node ID>"        # Inspect a node
docker-machine ssh myvm1 "docker swarm join-token -q worker"   # View join token
docker-machine ssh myvm1   # Open an SSH session with the VM; type "exit" to end
docker node ls                # View nodes in swarm (while logged on to manager)
docker-machine ssh myvm2 "docker swarm leave"  # Make the worker leave the swarm
docker-machine ssh myvm1 "docker swarm leave -f" # Make master leave, kill swarm
docker-machine ls # list VMs, asterisk shows which VM this shell is talking to
docker-machine start myvm1            # Start a VM that is currently not running
docker-machine env myvm1      # show environment variables and command for myvm1
eval $(docker-machine env myvm1)         # Mac command to connect shell to myvm1
& "C:\Program Files\Docker\Docker\Resources\bin\docker-machine.exe" env myvm1 | Invoke-Expression   # Windows command to connect shell to myvm1
docker stack deploy -c <file> <app>  # Deploy an app; command shell must be set to talk to manager (myvm1), uses local Compose file
docker-machine scp docker-compose.yml myvm1:~ # Copy file to node's home dir (only required if you use ssh to connect to manager and deploy the app)
docker-machine ssh myvm1 "docker stack deploy -c <file> <app>"   # Deploy an app using ssh (you must have first copied the Compose file to myvm1)
eval $(docker-machine env -u)     # Disconnect shell from VMs, use native docker
docker-machine stop $(docker-machine ls -q)               # Stop all running VMs
docker-machine rm $(docker-machine ls -q) # Delete all VMs and their disk images

## PART 5 Stacks
eval $(docker-machine env myvm1)
docker stack deploy -c docker-compose.yml getstartedlab
# browse http://10.211.55.182:8080/
docker stack ps getstartedlab


## PART 6 Deploy to Cloud service AWS, Azure, etc..
skipped


